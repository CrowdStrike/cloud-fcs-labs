---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Entry Stack for the Dev.Days CNAP Workshop.  Creates an EKS cluster in a VPC with a loadbalancer-controller and a CodeBuild pipelines to buid
              a container image and push to ECR whilst integrating with the CrowdStrike image scanning engine.'

Parameters:
  # Falcon Keys
  # FalconCID:
  #   NoEcho: true
  #   Description: 'Customer CID for the Falcon Installation'
  #   Type: String
  # CrowdStrikeCloud:
  #   Type: String
  #   AllowedValues: ['us-1','us-2','eu-1']
  #   Default: 'us-1'
  # FalconClientID:
  #   NoEcho: true
  #   Description: 'Client ID for the Falcon API'
  #   Type: String
  # FalconClientSecret:
  #   NoEcho: true
  #   Description: 'Client Secret for the Falcon API'
  #   Type: String

  EnvAlias:
    Type: String
    Default: 'fcs-lab'
  EnvHash:
    Type: String
    Default: '' 
  # AWS Account Dependencies
  S3Bucket:
    Type: String
    Default: ''
  S3Prefix:
    Type: String
    Default: 'deployInfra'
  # PermissionsBoundary:
  #   Type: String
  #   Default: 'BoundaryForAdministratorAccess'
  # KeyPairName:
  #   Type: String
  #   Default: ''
  # Shared K8S Attributes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.25", "1.26", "1.27", "1.28", "1.29" ]
    Default: "1.27"
    Description: Kubernetes control plane version.
  EKSClusterName:
    Type: String
    Default: 'fcs-lab-EKS-cluster'
  # # Optional
  # RemoteAccessCIDR:
  #   Type: String
  #   Default: 1.1.1.1/32

Conditions:
  SetEnvHashParameter: !Not 
    - !Equals
      - !Ref EnvHash
      - ''
  SetS3BucketParameter: !Not
    - !Equals
      - !Ref S3Bucket
      - ''

Resources:

  ParameterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: 
        - !If 
          - SetS3BucketParameter
          - !Sub 'https://${S3Bucket}.s3.amazonaws.com/${S3Prefix}/setStackParameters.yaml'
          - !Sub 'https://{{resolve:ssm:FCSLab-S3Bucket}}.s3.amazonaws.com/${S3Prefix}/setStackParameters.yaml'
      Parameters:
        EnvHash: 
          - !If [SetEnvHashParameter, !Ref EnvHash, '{{resolve:ssm:FCSLab-EnvHash}}']
        SetEnvHashParameter: !Condition SetEnvHashParameter 
        S3Bucket: 
          - !If [SetS3BucketParameter, !Ref S3Bucket, '{{resolve:ssm:FCSLab-S3Bucket}}']
        SetS3BucketParameter: !Condition SetS3BucketParameter

  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/iam.yaml'
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !GetAtt ParameterStack.Outputs.EnvHash
        S3Bucket: !GetAtt ParameterStack.Outputs.S3Bucket
        # PermissionsBoundary: !Ref PermissionsBoundary

  VPCStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: IAMStack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/vpc.yaml'
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !GetAtt ParameterStack.Outputs.EnvHash
        S3Bucket: !GetAtt ParameterStack.Outputs.S3Bucket
        # PermissionsBoundary: !Ref PermissionsBoundary

  EKSCodeBuildStack:
      Type: AWS::CloudFormation::Stack
      DependsOn: IAMStack
      Properties:
        TemplateURL:  !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/eksCodeBuild.yaml'
        Parameters:
          EnvAlias: !Ref EnvAlias
          EnvHash: !GetAtt ParameterStack.Outputs.EnvHash
          EKSClusterName: !Ref EKSClusterName
          KubernetesVersion: !Ref KubernetesVersion
          SubnetPrivate1: !GetAtt VPCStack.Outputs.SubnetPrivate1
          SubnetPrivate2: !GetAtt VPCStack.Outputs.SubnetPrivate2
          SubnetPublic1: !GetAtt VPCStack.Outputs.SubnetPublic1
          SubnetPublic2: !GetAtt VPCStack.Outputs.SubnetPublic2
          FCSRole: !GetAtt IAMStack.Outputs.FCSRole
          # PermissionsBoundary: !Ref PermissionsBoundary
          # EKSCodeBuildServiceRoleArn: !GetAtt IAMStack.Outputs.EKSCodeBuildServiceRoleArn
          # EKSQSExtentionRoleArn: !GetAtt IAMStack.Outputs.EKSQSExtentionRoleArn
          # BastionRole: !GetAtt IAMStack.Outputs.BastionHostRole

  BastionStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: EKSCodeBuildStack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/bastion.yaml'
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash:  !GetAtt ParameterStack.Outputs.EnvHash
        VPCID: !GetAtt VPCStack.Outputs.VpcId
        S3Bucket: !GetAtt ParameterStack.Outputs.S3Bucket
        S3Prefix: !Ref S3Prefix
        PublicSubnet1ID: !GetAtt VPCStack.Outputs.SubnetPublic1
        FCSInstanceProfile: !GetAtt IAMStack.Outputs.FCSInstanceProfile
        # KeyPairName: !Ref KeyPairName
        # RemoteAccessCIDR: !Ref RemoteAccessCIDR
        # BastionRole: !GetAtt IAMStack.Outputs.BastionHostRole
        # ControlPlaneSecurityGroupId: !GetAtt EKSControlPlaneStack.Outputs.ControlPlaneSecurityGroupId
        # EnvironmentVariables: !Sub "CS_CID=${FalconCID}, DOCKER_API_TOKEN=${DockerAPIToken}, CS_ENV=${CrowdStrikeCloud}, CS_CLIENT_ID=${FalconClientID}, CS_CLIENT_SECRET=${FalconClientSecret}, K8S_CLUSTER_NAME=${EKSControlPlaneStack.Outputs.UniqueClusterName}, K8S_CA_DATA=${EKSControlPlaneStack.Outputs.CAData}, K8S_VERSION=${KubernetesVersion}, K8S_ENDPOINT=${EKSControlPlaneStack.Outputs.EKSEndpoint}"

  MetasploitStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/metasploit.yaml'
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash:  !GetAtt ParameterStack.Outputs.EnvHash
        S3Bucket: !GetAtt ParameterStack.Outputs.S3Bucket
        S3Prefix: !Ref S3Prefix
        VPCCIDR: !GetAtt VPCStack.Outputs.VpcCIDROut
        PublicSubnetCIDR: !GetAtt VPCStack.Outputs.PublicSubnet1CIDROut
        NATGatewayEIP: !GetAtt VPCStack.Outputs.NATGatewayEIP
        # KeyPairName: !Ref KeyPairName
        # RemoteAccessCIDR: !Ref RemoteAccessCIDR
        # PermissionsBoundary: !Ref PermissionsBoundary

  ConfidentialBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/vulBucket.yaml'
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash:  !GetAtt ParameterStack.Outputs.EnvHash
        TemplateBucket: !GetAtt ParameterStack.Outputs.S3Bucket
        S3Prefix: !Ref S3Prefix
        # PermissionsBoundary: !Ref PermissionsBoundary

  SSMConfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${ParameterStack.Outputs.S3Bucket}.s3.amazonaws.com/${S3Prefix}/SSMConf.yaml'
 