---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Main template for base infrastructure stack supporting the Falcon Cloud Security Lab.  Creates an EKS cluster via eksctl and CodeBuild job, a Metasploit attacker instance, and other good stuff.'

Parameters:

  EnvAlias:
    Type: String
    Default: 'fcs-lab'
  SSM-EnvHash:
    Type: AWS::SSM::Parameter::Value<String>
  # AWS Account Dependencies
  SSM-S3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
  EnvHashInput:
    Type: String
    Description: "Leave blank to use existing SSM Parameter 'SSM-EnvHash'. Otherwise, a 5-character alphanumeric value is required."
  S3BucketInput:
    Type: String
    Description: "Leave blank to use existing SSM Parameter 'SSM-S3Bucket'. Otherwise, use your S3Bucket name that already contains FCSLab template files cloned from GitHub."
  S3Prefix:
    Type: String
    Default: 'deployInfra'

 # Shared K8S Attributes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.25", "1.26", "1.27", "1.28", "1.29" ]
    Default: "1.27"
    Description: Kubernetes control plane version.
  EKSClusterName:
    Type: String
    Default: "fcs-lab-EKS-cluster"

 # Optional
  # RemoteAccessCIDR:
  #   Type: String
  #   Default: 1.1.1.1/32
  # PermissionsBoundary:
  #   Type: String
  #   Default: 'BoundaryForAdministratorAccess'
  # KeyPairName:
  #   Type: String
  #   Default: ''
  
Conditions:
  SetEnvHashParameter: 
    !Not [!Equals [!Ref EnvHashInput, '']]
  SetS3BucketParameter: 
    !Not [!Equals [!Ref S3BucketInput, '']]

Resources:

  InfraStackParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Overwrite SSM-InfraStack parameter with current
      Name: "SSM-InfraStack"
      Type: String
      Value: !Ref "AWS::StackName"

  EnvHashParameter:
    Type: AWS::SSM::Parameter
    Condition: SetEnvHashParameter
    Properties:
      Description: Overwrite SSM-EnvHash parameter with current
      Name: "SSM-InfraStack"
      Type: String
      Value: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
  
  S3BucketParameter:
    Type: AWS::SSM::Parameter
    Condition: SetS3BucketParameter
    Properties:
      Description: Overwrite SSM-S3Bucket parameter with current
      Name: "SSM-InfraStack"
      Type: String
      Value: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
      
  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/iam.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/iam.yaml']
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
        S3Bucket: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
        # PermissionsBoundary: !Ref PermissionsBoundary

  VPCStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: IAMStack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/vpc.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/vpc.yaml']
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
        S3Bucket: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
        # PermissionsBoundary: !Ref PermissionsBoundary

  EKSCodeBuildStack:
      Type: AWS::CloudFormation::Stack
      DependsOn: IAMStack
      Properties:
        TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/eksCodeBuild.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/eksCodeBuild.yaml']
        Parameters:
          EnvAlias: !Ref EnvAlias
          EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
          EKSClusterName: !Ref EKSClusterName
          KubernetesVersion: !Ref KubernetesVersion
          SubnetPrivate1: !GetAtt VPCStack.Outputs.SubnetPrivate1
          SubnetPrivate2: !GetAtt VPCStack.Outputs.SubnetPrivate2
          SubnetPublic1: !GetAtt VPCStack.Outputs.SubnetPublic1
          SubnetPublic2: !GetAtt VPCStack.Outputs.SubnetPublic2
          FCSRole: !GetAtt IAMStack.Outputs.FCSRole
          # PermissionsBoundary: !Ref PermissionsBoundary
          # EKSCodeBuildServiceRoleArn: !GetAtt IAMStack.Outputs.EKSCodeBuildServiceRoleArn
          # EKSQSExtentionRoleArn: !GetAtt IAMStack.Outputs.EKSQSExtentionRoleArn
          # BastionRole: !GetAtt IAMStack.Outputs.BastionHostRole

  BastionStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: EKSCodeBuildStack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/bastion.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/bastion.yaml']
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
        S3Bucket: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
        S3Prefix: !Ref S3Prefix
        VPCID: !GetAtt VPCStack.Outputs.VpcId
        PublicSubnet1ID: !GetAtt VPCStack.Outputs.SubnetPublic1
        FCSInstanceProfile: !GetAtt IAMStack.Outputs.FCSInstanceProfile
        # KeyPairName: !Ref KeyPairName
        # RemoteAccessCIDR: !Ref RemoteAccessCIDR
        # BastionRole: !GetAtt IAMStack.Outputs.BastionHostRole
        # ControlPlaneSecurityGroupId: !GetAtt EKSControlPlaneStack.Outputs.ControlPlaneSecurityGroupId
        # EnvironmentVariables: !Sub "CS_CID=${FalconCID}, DOCKER_API_TOKEN=${DockerAPIToken}, CS_ENV=${CrowdStrikeCloud}, CS_CLIENT_ID=${FalconClientID}, CS_CLIENT_SECRET=${FalconClientSecret}, K8S_CLUSTER_NAME=${EKSControlPlaneStack.Outputs.UniqueClusterName}, K8S_CA_DATA=${EKSControlPlaneStack.Outputs.CAData}, K8S_VERSION=${KubernetesVersion}, K8S_ENDPOINT=${EKSControlPlaneStack.Outputs.EKSEndpoint}"

  MetasploitStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/metasploit.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/metasploit.yaml']
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
        S3Bucket: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
        S3Prefix: !Ref S3Prefix
        VPCCIDR: !GetAtt VPCStack.Outputs.VpcCIDROut
        PublicSubnetCIDR: !GetAtt VPCStack.Outputs.PublicSubnet1CIDROut
        NATGatewayEIP: !GetAtt VPCStack.Outputs.NATGatewayEIP
        # KeyPairName: !Ref KeyPairName
        # RemoteAccessCIDR: !Ref RemoteAccessCIDR
        # PermissionsBoundary: !Ref PermissionsBoundary

  ConfidentialBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/vulBucket.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/vulBucket.yaml']
      Parameters:
        EnvAlias: !Ref EnvAlias
        EnvHash: !If [SetEnvHashParameter, !Ref EnvHashInput, !Ref SSM-EnvHash]
        S3Bucket: !If [SetS3BucketParameter, !Ref S3BucketInput, !Ref SSM-S3Bucket]
        S3Prefix: !Ref S3Prefix
        # PermissionsBoundary: !Ref PermissionsBoundary

  SSMConfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !If [SetS3BucketParameter, !Sub 'https://${S3BucketInput}.s3.amazonaws.com/${S3Prefix}/SSMConf.yaml', !Sub 'https://${SSM-S3Bucket}.s3.amazonaws.com/${S3Prefix}/SSMConf.yaml']
 