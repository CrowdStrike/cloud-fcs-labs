---
AWSTemplateFormatVersion: '2010-09-09'
Description: CrowdStrike Horizon (CSPM) Register Single Account Template

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Falcon API Credentials
        Parameters:
          - FalconClientID
          - FalconSecret
          - CSCloud
          - FalconSecretName
      - Label:
          default: Configure Indicator of Attack Scanning
        Parameters:
          - EnableIOA
      
    ParameterLabels:
      FalconClientID:
        default: Falcon API Client ID
      FalconSecret:
        default: Falcon API Secret
      EnableIOA:
        default: Enable IOA Scanning (Adds EventBridge forwarding rules)
      CSCloud:
        default: CrowdStrike Cloud
      FalconSecretName:
        default: Name of Secret containing your Falcon API Credentials

Parameters:
  FalconSecretName:
    Description: "Falcon Secret Name"
    Type: String
    Default: 'crowdstrike-falcon-api'
  FalconClientID:
    Description: Your Falcon OAuth2 Client ID.
    # NoEcho: 'true'
    Type: String
  FalconSecret:
    Description: Your Falcon OAuth2 API Secret.
    # NoEcho: 'true'
    Type: String
  CSCloud:
    Type: String
    Default: us-1
    AllowedValues: [ "us-1", "us-2", "eu-1" ]
    Description: The Cloud your Falcon CID is hosted in
  EnableIOA:
    Type: String
    Description: Set IOA Scanning
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'

Resources:
  CrowdStrikeStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        RoleName: !GetAtt TriggerRegisterAccountLambda.iam_role_name
        ExternalID: !GetAtt TriggerRegisterAccountLambda.external_id
        CSRoleName: !GetAtt TriggerRegisterAccountLambda.cs_role_name
        CSAccountNumber: !GetAtt TriggerRegisterAccountLambda.cs_account_id
        CSEventBusName: !GetAtt TriggerRegisterAccountLambda.eventbus_name
        CSBucketName: !GetAtt TriggerRegisterAccountLambda.cs_bucket_name
        EnableIOA: !Ref EnableIOA
        ClientID: !Ref FalconClientID
        ClientSecret: !Ref FalconSecret
        UseExistingCloudtrail: 'false'
      TemplateURL: https://cs-prod-cloudconnect-templates.s3-us-west-1.amazonaws.com/aws_cspm_cloudformation_lambda_v2.json

  LambdaCrowdStrikeRegistrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: CrowdStrikeApiSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:secretsmanager:*:*:secret:${FalconSecretName}*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
  RegisterAccountLambda:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda custom resource only run during stack lifecycle events.
          - id: W92
            reason: Lambda custom resource only run during stack lifecycle events.
    Properties:
      Environment:
        Variables:
          secret_region: !Ref AWS::Region
          secret_name: !Ref FalconSecretName
          exclude_regions: 'none'
          existing_cloudtrail: 'False'
          cs_cloud: !Ref CSCloud
          aws_account_type: 'commercial'
          falcon_account_type: 'commercial'
          organization: 'False'
          user_agent: 'cloud-fcs-labs'
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaCrowdStrikeRegistrationRole.Arn"
      Runtime: python3.11
      Timeout: 300
      FunctionName: crowdstrike-horizon-registration
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import sys
          import subprocess
          import boto3
          import time
          import base64
          from botocore.exceptions import ClientError

          os.chdir('/tmp')
          requirements = open("requirements.txt", "x")
          requirements = open("requirements.txt", "a")
          requirements.write("urllib3<2")
          requirements = open("requirements.txt", "a")
          requirements.write("requests==2.31.0")
          # pip install falconpy package to /tmp/ and add to path
          subprocess.call('pip install crowdstrike-falconpy -r /tmp/requirements.txt -t /tmp/ --no-cache-dir'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
          sys.path.insert(1, '/tmp/')
          import requests
          from falconpy import CSPMRegistration
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # CONSTANTS
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          SECRET_STORE_NAME = os.environ['secret_name']
          SECRET_STORE_REGION = os.environ['secret_region']
          EXCLUDE_REGIONS = os.environ['exclude_regions']
          EXISTING_CLOUDTRAIL = eval(os.environ['existing_cloudtrail'])
          AWS_REGION = os.environ['AWS_REGION']
          CS_CLOUD = os.environ['cs_cloud']
          AWS_ACCOUNT_TYPE = os.environ['aws_account_type']
          FALCON_ACCOUNT_TYPE = os.environ['falcon_account_type']
          ORGANIZATION = eval(os.environ['organization'])
          USER_AGENT = os.environ['user_agent']

          VERSION = "2.0.0"
          useragent = ("%s/%s" % (USER_AGENT, VERSION))

          def get_management_id():
              ORG = boto3.client('organizations')
              try:
                  orgIDstr = ORG.list_roots()['Roots'][0]['Arn'].rsplit('/')[1]
                  return orgIDstr
              except Exception as e:
                  logger.error(e)
                  return False
                
          def get_secret():
              session = boto3.session.Session()
              client = session.client(
                  service_name='secretsmanager',
                  region_name=SECRET_STORE_REGION
              )
              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=SECRET_STORE_NAME
                  )
              except ClientError as e:
                  raise e
              else:
                  if 'SecretString' in get_secret_value_response:
                      secret = get_secret_value_response['SecretString']
                  else:
                      secret = base64.b64decode(get_secret_value_response['SecretBinary'])
                  return secret

          def get_active_regions():
              session = boto3.session.Session()
              client = session.client(
                  service_name='ec2',
                  region_name=AWS_REGION
              )
              supported_regions = [
                  "af-south-1",
                  "ap-east-1",
                  "ap-northeast-1",
                  "ap-northeast-2",
                  "ap-south-1",
                  "ap-southeast-1",
                  "ap-southeast-2",
                  "ca-central-1",
                  "eu-central-1",
                  "eu-north-1",
                  "eu-south-1",
                  "eu-west-1",
                  "eu-west-2",
                  "eu-west-3",
                  "me-south-1",
                  "sa-east-1",
                  "us-east-1",
                  "us-east-2",
                  "us-west-1",
                  "us-west-2"
              ]
              active_regions = []
              my_regions = []
              comm_gov_eb_regions = []
              ssm_regions = []
              try:
                  describe_regions_response = client.describe_regions(AllRegions=False)
                  regions = describe_regions_response['Regions']
                  for region in regions:
                      active_regions += [region['RegionName']]
                  for region in active_regions:
                      if region not in EXCLUDE_REGIONS:
                          my_regions += [region]
                  for region in my_regions:
                      if region != AWS_REGION:
                          comm_gov_eb_regions += [region]
                  for region in my_regions:
                      if region in supported_regions:
                          ssm_regions += [region]
                  return my_regions, comm_gov_eb_regions, ssm_regions
              except Exception as e:
                  logger.error(e)
                  return False

          def process_response(response, regions, comm_gov_eb_regions, ssm_regions):
              cs_account = response['body']['resources'][0]['intermediate_role_arn'].rsplit('::')[1]
              response_d = {
                  "cs_account_id": cs_account.rsplit(':')[0],
                  "iam_role_name": response['body']['resources'][0]['iam_role_arn'].rsplit('/')[1],
                  "intermediate_role_arn": response['body']['resources'][0]['intermediate_role_arn'],
                  "cs_role_name": response['body']['resources'][0]['intermediate_role_arn'].rsplit('/')[1],
                  "external_id": response['body']['resources'][0]['external_id']
              }
              if not EXISTING_CLOUDTRAIL:
                  response_d['cs_bucket_name'] = response['body']['resources'][0]['aws_cloudtrail_bucket_name']
              if FALCON_ACCOUNT_TYPE == "commercial":
                  response_d['eventbus_name'] = response['body']['resources'][0]['eventbus_name']
                  response_d['my_regions'] = regions
                  response_d['ssm_regions'] = ssm_regions
              elif FALCON_ACCOUNT_TYPE == "govcloud" and AWS_ACCOUNT_TYPE == "govcloud" :
                  response_d['eventbus_name'] = response['body']['resources'][0]['eventbus_name'].rsplit(',')[0]
                  response_d['my_regions'] = regions
                  response_d['ssm_regions'] = ssm_regions
              elif FALCON_ACCOUNT_TYPE == "govcloud" and AWS_ACCOUNT_TYPE == "commercial" :
                  response_d['comm_gov_eb_regions'] = comm_gov_eb_regions
                  response_d['my_regions'] = regions
                  response_d['ssm_regions'] = ssm_regions
              return response_d

          def cfnresponse_send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']
              print(responseUrl)
              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: '
              responseBody['PhysicalResourceId'] = physicalResourceId
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['Data'] = responseData
              json_responseBody = json.dumps(responseBody)
              print("Response body:\n" + json_responseBody)
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }
              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))

          def lambda_handler(event, context):
              logger.info('Got event {}'.format(event))
              logger.info('Context {}'.format(context))
              aws_account_id = context.invoked_function_arn.split(":")[4]
              regions, comm_gov_eb_regions, ssm_regions = get_active_regions()
              if ORGANIZATION:
                OrgId = get_management_id()
              try:
                  secret_str = get_secret()
                  if secret_str:
                      secrets_dict = json.loads(secret_str)
                      FalconClientId = secrets_dict['FalconClientId']
                      FalconSecret = secrets_dict['FalconSecret']
                      falcon = CSPMRegistration(client_id=FalconClientId,
                                              client_secret=FalconSecret,
                                              base_url=CS_CLOUD,
                                              user_agent=useragent
                                              )
                      if event['RequestType'] in ['Create']:
                          logger.info('Event = {}'.format(event))
                          if ORGANIZATION:
                              response = falcon.create_aws_account(account_id=aws_account_id,
                                                                  organization_id=OrgId,
                                                                  behavior_assessment_enabled=True,
                                                                  sensor_management_enabled=True,
                                                                  use_existing_cloudtrail=EXISTING_CLOUDTRAIL,
                                                                  cloudtrail_region=AWS_REGION,
                                                                  user_agent=useragent,
                                                                  is_master=True,
                                                                  account_type=AWS_ACCOUNT_TYPE
                                                                  )                    
                          else:
                              response = falcon.create_aws_account(account_id=aws_account_id,
                                                                  behavior_assessment_enabled=True,
                                                                  sensor_management_enabled=True,
                                                                  use_existing_cloudtrail=EXISTING_CLOUDTRAIL,
                                                                  cloudtrail_region=AWS_REGION,
                                                                  user_agent=useragent,
                                                                  is_master=False,
                                                                  account_type=AWS_ACCOUNT_TYPE
                                                                  )
                          logger.info('Response: {}'.format(response))
                          if response['status_code'] == 201:
                              response_d = process_response(response, regions, comm_gov_eb_regions, ssm_regions)
                              cfnresponse_send(event, context, SUCCESS, response_d, "CustomResourcePhysicalID")
                          elif 'already exists' in response['body']['errors'][0]['message']:
                              logger.info(response['body']['errors'][0]['message'])
                              logger.info('Getting existing registration data...')
                              if ORGANIZATION:
                                  response = falcon.get_aws_account(organization_ids=OrgId,
                                                                    user_agent=useragent)
                              else:
                                  response = falcon.get_aws_account(ids=aws_account_id,
                                                                    user_agent=useragent)
                              logger.info('Existing Registration Response: {}'.format(response))
                              response_d = process_response(response, regions, comm_gov_eb_regions, ssm_regions)
                              cfnresponse_send(event, context, SUCCESS, response_d, "CustomResourcePhysicalID")
                          else:
                              error = response['body']['errors'][0]['message']
                              logger.info('Account Registration Failed with reason....{}'.format(error))
                              response_d = {
                                  "reason": response['body']['errors'][0]['message']
                              }
                              cfnresponse_send(event, context, FAILED, response_d, "CustomResourcePhysicalID")
                      elif event['RequestType'] in ['Update']:
                          response_d = {}
                          logger.info('Event = ' + event['RequestType'])
                          cfnresponse_send(event, context, SUCCESS, response_d, "CustomResourcePhysicalID")
                      elif event['RequestType'] in ['Delete']:
                          logger.info('Event = ' + event['RequestType'])
                          if ORGANIZATION:
                            response = falcon.delete_aws_account(organization_ids=OrgId,
                                                                user_agent=useragent
                                                                )
                          else:
                            response = falcon.delete_aws_account(ids=aws_account_id,
                                                                user_agent=useragent
                                                                )
                          cfnresponse_send(event, context, 'SUCCESS', response['body'], "CustomResourcePhysicalID")
              except Exception as err:
                  logger.info('Registration Failed {}'.format(err))
                  cfnresponse_send(event, context, FAILED, err, "CustomResourcePhysicalID")
  TriggerRegisterAccountLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - LambdaCrowdStrikeRegistrationRole
    Properties:
      aws_region: !Ref AWS::Region
      CSCloud: !Ref CSCloud
      ServiceToken: !GetAtt
        - RegisterAccountLambda
        - Arn

Outputs:
  RoleName:
    Value: !GetAtt TriggerRegisterAccountLambda.iam_role_name
    Export:
      Name: iamRoleName
  CSRoleArn:
    Value: !GetAtt TriggerRegisterAccountLambda.intermediate_role_arn
    Export:
      Name: csRoleArn
  ExternalId:
    Value: !GetAtt TriggerRegisterAccountLambda.external_id
    Export:
      Name: externalId
  EventbusName:
    Value: !GetAtt TriggerRegisterAccountLambda.eventbus_name
    Export:
      Name: eventbusName
